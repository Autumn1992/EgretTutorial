
####高级类型

#交叉类型       Person & Serializable & Loggable同时是 Person 和 Serializable 和 Loggable
                function extend<T, U>(first: T, second: U): T & U {
                    let result = <T & U>{};
                    for (let id in first) {
                        (<any>result)[id] = (<any>first)[id];
                    }
                    for (let id in second) {
                        if (!result.hasOwnProperty(id)) {
                            (<any>result)[id] = (<any>second)[id];
                        }
                    }
                    return result;
                }

                class Person {
                    constructor(public name: string) { }
                }
                interface Loggable {
                    log(): void;
                }
                class ConsoleLogger implements Loggable {
                    log() {
                        // ...
                    }
                }
                var jim = extend(new Person("Jim"), new ConsoleLogger());
                var n = jim.name;
                jim.log();

#联合类型       联合类型与交叉类型很有关联，但是使用上却完全不同。 偶尔你会遇到这种情况，一个代码库希望传入 
               number或 string类型的参数  
                /**
                * Takes a string and adds "padding" to the left.
                * If 'padding' is a string, then 'padding' is appended to the left side.
                * If 'padding' is a number, then that number of spaces is added to the left side.
                */
                function padLeft(value: string, padding: any) {
                    if (typeof padding === "number") {
                        return Array(padding + 1).join(" ") + value;
                    }
                    if (typeof padding === "string") {
                        return padding + value;
                    }
                    throw new Error(`Expected string or number, got '${padding}'.`);
                }

                padLeft("Hello world", 4); // returns "    Hello world"
                ##修改版
                function padLeft(value: string, padding: string | number) {
                    if (typeof padding === "number") {
                        return Array(padding + 1).join(" ") + value;
                    }
                    if (typeof padding === "string") {
                        return padding + value;
                    }
                    throw new Error(`Expected string or number, got '${padding}'.`);
                }

                padLeft("Hello world", 4); // returns "    Hello world"

                #如果一个值是联合类型，我们只能访问此联合类型的所有类型里共有的成员。
                interface Bird {
                    fly();
                    layEggs();
                }

                interface Fish {
                    swim();
                    layEggs();
                }

                function getSmallPet(): Fish | Bird {
                    // ...
                }

                let pet = getSmallPet();
                pet.layEggs(); // okay
                pet.swim();    // errors

                #类型保护与区分类型
                let pet = getSmallPet();
                // 每一个成员访问都会报错
                if (pet.swim) {
                    pet.swim();
                }
                else if (pet.fly) {
                    pet.fly();
                }
                #要想让上面代码正常工作
                let pet = getSmallPet();
                if ((<Fish>pet).swim) {
                    (<Fish>pet).swim();
                }
                else {
                    (<Bird>pet).fly();
                }

                #用户自定义的类型保护
                #TypeScript里的 类型保护机制让它成为了现实。 类型保护就是一些表达式，它们会在运行时检查以
                确保在某个作用域里的类型。 要定义一个类型保护，我们只要简单地定义一个函数，它的返回值是一个 类型谓词：
                在这个例子里， pet is Fish就是类型谓词。 谓词为 parameterName is Type这种形式， parameterName
                必须是来自于当前函数签名里的一个参数名。
                每当使用一些变量调用 isFish时，TypeScript会将变量缩减为那个具体的类型，只要这个类型与变量的原始类型是兼容的。
                function isFish(pet: Fish | Bird): pet is Fish {
                    return (<Fish>pet).swim !== undefined;
                }
                // 'swim' 和 'fly' 调用都没有问题了
                if (isFish(pet)) {
                    pet.swim();
                }
                else {
                    pet.fly();
                }

                #typeof类型保护
                function isNumber(x: any): x is number {
                    return typeof x === "number";
                }

                function isString(x: any): x is string {
                    return typeof x === "string";
                }

                function padLeft(value: string, padding: string | number) {
                    if (isNumber(padding)) {
                        return Array(padding + 1).join(" ") + value;
                    }
                    if (isString(padding)) {
                        return padding + value;
                    }
                    throw new Error(`Expected string or number, got '${padding}'.`);
                }

                function padLeft(value: string, padding: string | number) {
                    if (typeof padding === "number") {
                        return Array(padding + 1).join(" ") + value;
                    }
                    if (typeof padding === "string") {
                        return padding + value;
                    }
                    throw new Error(`Expected string or number, got '${padding}'.`);
                }

#instanceof类型保护 
                interface Padder {
                    getPaddingString(): string
                }

                class SpaceRepeatingPadder implements Padder {
                    constructor(private numSpaces: number) { }
                    getPaddingString() {
                        return Array(this.numSpaces + 1).join(" ");
                    }
                }

                class StringPadder implements Padder {
                    constructor(private value: string) { }
                    getPaddingString() {
                        return this.value;
                    }
                }

                function getRandomPadder() {
                    return Math.random() < 0.5 ?
                        new SpaceRepeatingPadder(4) :
                        new StringPadder("  ");
                }

                // 类型为SpaceRepeatingPadder | StringPadder
                let padder: Padder = getRandomPadder();

                if (padder instanceof SpaceRepeatingPadder) {
                    padder; // 类型细化为'SpaceRepeatingPadder'
                }
                if (padder instanceof StringPadder) {
                    padder; // 类型细化为'StringPadder'
                }
                #instanceof的右侧要求是一个构造函数，TypeScript将细化为：
                1.此构造函数的 prototype属性的类型，如果它的类型不为 any的话
                2.构造签名所返回的类型的联合

#可选参数和可选属性  使用了--strictNullChecks，可选参数会被自动的加上|undefined
                ||操作符当第一个参数为null或者undefined时取后面的参数 类似Lua的or

                #类型保护和类型断言
                如果编译器不能够去除 null或 undefined，你可以使用类型断言手动去除。 
                语法是添加 !后缀： identifier!从 identifier的类型里去除了 null和 undefined：

                #此处name虽然做了一次||赋值不会出现null 但编译器并不知道 没有去做上下文推断
                function broken(name: string | null): string {
                    function postfix(epithet: string) {
                        return name.charAt(0) + '.  the ' + epithet; // error, 'name' is possibly null
                    }
                    name = name || "Bob";
                    return postfix("great");
                }

                function fixed(name: string | null): string {
                    function postfix(epithet: string) {
                        return name!.charAt(0) + '.  the ' + epithet; // ok
                    }
                    name = name || "Bob";
                    return postfix("great");
                }

#类型别名        #用法颇显复杂和深奥
                type Name = string;
                type NameResolver = () => string;
                type NameOrResolver = Name | NameResolver;
                function getName(n: NameOrResolver): Name {
                    if (typeof n === 'string') {
                        return n;
                    }
                    else {
                        return n();
                    }
                }
                #类型别名不能被 extends和 implements （自己也不能 extends和 implements其它类型）
                #如果你无法通过接口来描述一个类型并且需要使用联合类型或元组类型，这时通常会使用类型别名。


            
###################################字面量类型#########################################
#字符串字面量类型
                字符串字面量类型允许你指定字符串必须的固定值。 在实际应用中，字符串字面量类型可以与联合类型，
                类型保护和类型别名很好的配合。 通过结合使用这些特性，你可以实现类似枚举类型的字符串。
                type Easing = "ease-in" | "ease-out" | "ease-in-out";
                class UIElement {
                    animate(dx: number, dy: number, easing: Easing) {
                        if (easing === "ease-in") {
                            // ...
                        }
                        else if (easing === "ease-out") {
                        }
                        else if (easing === "ease-in-out") {
                        }
                        else {
                            // error! should not pass null or undefined.
                        }
                    }
                }
                let button = new UIElement();
                button.animate(0, 0, "ease-in");
                button.animate(0, 0, "uneasy"); // error: "uneasy" is not allowed here

                #字符串字面量类型还可以用于区分函数重载：
                function createElement(tagName: "img"): HTMLImageElement;
                function createElement(tagName: "input"): HTMLInputElement
                function createElement(tagName: string): Element { }

#数字字面量类型    
                #我们很少直接这样使用，但它们可以用在缩小范围调试bug的时候
                function rollDie(): 1 | 2 | 3 | 4 | 5 | 6 { }
                function foo(x: number) {
                    if (x !== 1 || x !== 2) {
                        //         ~~~~~~~
                        // Operator '!==' cannot be applied to types '1' and '2'.
                    }
                }

#可辨识联合
#多态的this类型
                class BasicCalculator {
                    public constructor(protected value: number = 0) { }
                    public currentValue(): number {
                        return this.value;
                    }
                    public add(operand: number): this {
                        this.value += operand;
                        return this;
                    }
                    public multiply(operand: number): this {
                        this.value *= operand;
                        return this;
                    }
                    // ... other operations go here ...
                }

                let v = new BasicCalculator(2)
                            .multiply(5)
                            .add(1)
                            .currentValue();

                class ScientificCalculator extends BasicCalculator {
                    public constructor(value = 0) {
                        super(value);
                    }
                    public sin() {
                        this.value = Math.sin(this.value);
                        return this;
                    }
                    // ... other operations go here ...
                }

                let v = new ScientificCalculator(2)
                        .multiply(5)
                        .sin()
                        .add(1)
                        .currentValue();
                #如果没有 this类型， ScientificCalculator就不能够在继承 BasicCalculator的同时还保持接口的连贯性。
                multiply将会返回 BasicCalculator，它并没有 sin方法。 然而，使用 this类型， multiply会返回 this，
                在这里就是 ScientificCalculator。

#索引类型
                #关键字keyof T 索引类型查询操作符。 对于任何类型 T， keyof T的结果为 T上已知的公共属性名的联合
                
                function pluck<T, K extends keyof T>(o: T, names: K[]): T[K][] {
                    return names.map(n => o[n]);
                }

                interface Person {
                    name: string;
                    age: number;
                }
                let person: Person = {
                    name: 'Jarid',
                    age: 35
                };
                let strings: string[] = pluck(person, ['name']); // ok, string[]
                
                #索引访问操作符T[K]
                function getProperty<T, K extends keyof T>(o: T, name: K): T[K] {
                    return o[name]; // o[name] is of type T[K]
                }

#映射类型       #将属性全改成readonly或可选 下面的编译应该是 所有属性加前缀修饰符再展开 形成新结构 个人猜测 无法修改接口
                type Readonly<T> = {
                    readonly [P in keyof T]: T[P];
                }
                type Partial<T> = {
                    [P in keyof T]?: T[P];
                }

                type Proxy<T> = {
                    get(): T;
                    set(value: T): void;
                }
                type Proxify<T> = {
                    [P in keyof T]: Proxy<T[P]>;
                }
                function proxify<T>(o: T): Proxify<T> { }
                let proxyProps = proxify(props);

                属性列表是 keyof T且结果类型是 T[P]的变体。 这是使用通用映射类型的一个好模版。 因为这类转换是 同态的，
                映射只作用于 T的属性而没有其它的。 编译器知道在添加任何新属性之前可以拷贝所有存在的属性修饰符。 例如，
                假设 Person.name是只读的，那么 Partial<Person>.name也将是只读的且为可选的

                #同态类型 非同态类型

                