
#类型推论   类型检查器     
            #如果没有找到最佳通用类型的话，类型推断的结果为联合数组类型，(Rhino | Elephant | Snake)[]。 
            let zoo: Animal[] = [new Rhino(), new Elephant(), new Snake()]; 
           
            #上下文类型


#类型兼容性  主要通过语法签名来做类型兼容的判定

            #如果x要兼容y，那么y至少具有与x相同的属性。
            #属性赋值及函数参数传递 变量赋值及函数参数传递都遵循这个原则。
            #函数赋值 
                let x = (a: number) => 0;
                let y = (b: number, s: string) => 0;
                y = x; // OK
                x = y; // Error
                要查看x是否能赋值给y，首先看它们的参数列表。 x的每个参数必须能在y里找到对应类型的参数。 
                注意的是参数的名字相同与否无所谓，只看它们的类型。 这里， x的每个参数在y中都能找到对应
                的参数，所以允许赋值。
                第二个赋值错误，因为y有个必需的第二个参数，但是x并没有，所以不允许赋值。
                你可能会疑惑为什么允许忽略参数，像例子y = x中那样。 原因是忽略额外的参数在JavaScript里是
                很常见的。 例如， Array#forEach给回调函数传3个参数：数组元素，索引和整个数组。 尽管如此，
                传入一个只使用第一个参数的回调函数也是很有用的：
                let items = [1, 2, 3];
                // Don't force these extra arguments
                items.forEach((item, index, array) => console.log(item));
                // Should be OK!
                items.forEach((item) => console.log(item));
                #有点像Lua

                #返回值类型处理 类型系统强制源函数的返回值类型必须是目标函数返回值类型的子类型。
                let x = () => ({name: 'Alice'});
                let y = () => ({name: 'Alice', location: 'Seattle'});
                x = y; // OK
                y = x; // Error because x() lacks a location property

#函数参数双向协变
#可选参数及剩余参数

#不同枚举类型之间不兼容
                enum Status { Ready, Waiting };
                enum Color { Red, Blue, Green };
                let status = Status.Ready;
                status = Color.Green;  //error   

#类比较         #类与对象字面量和接口差不多，但有一点不同：类有静态部分和实例部分的类型。 比较两个类类型的对象时，
                只有实例的成员会被比较。 静态成员和构造函数不在比较的范围内
                #私有成员会影响兼容性判断。 当类的实例用来检查兼容时，如果目标类型包含一个私有成员，那么源类型
                必须包含来自同一个类的这个私有成员。 这允许子类赋值给父类，但是不能赋值给其它有同样类型的类。
                在接口赋值类那一块有提到这种案例
                class Animal {
                    feet: number;
                    constructor(name: string, numFeet: number) { }
                }
                class Size {
                    feet: number;
                    constructor(numFeet: number) { }
                }
                let a: Animal;
                let s: Size;

                a = s;  //OK
                s = a;  //OK

#泛型兼容性
                因为TypeScript是结构性的类型系统，类型参数只影响使用其做为类型一部分的结果类型。比如，
                interface Empty<T> {  }
                let x: Empty<number>;
                let y: Empty<string>;

                x = y;  // okay, y matches structure of x
                上面代码里，x和y是兼容的，因为它们的结构使用类型参数时并没有什么不同。 把这个例子改变一下，
                增加一个成员，就能看出是如何工作的了：

                interface NotEmpty<T> {
                    data: T;
                }
                let x: NotEmpty<number>;
                let y: NotEmpty<string>;

                x = y;  // error, x and y are not compatible
                在这里，泛型类型在使用时就好比不是一个泛型类型。

                对于没指定泛型类型的泛型参数时，会把所有泛型参数当成any比较。 然后用结果类型进行比较，就像上面第一个例子。
                let identity = function<T>(x: T): T {  }

                let reverse = function<U>(y: U): U {  }
                identity = reverse;  // Okay because (x: any)=>any matches (y: any)=>any 

#子类型与赋值    ##类型兼容行 <= 赋值兼容性   